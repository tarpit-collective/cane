// Literals
ident = ? {XID_Start}{XID_Continue}* ?
number = ? 0-9* ?
comment = ? #.*\n ?

rhythm = '!' | '.'
expression = ident | number | rhythm

// Definition
expression = expression '=>' ident

// Expression
expression = '(' expression ')'

// Functions
expression = '\' ident expr
expression = expression '.' expression  // Function call

// Scalars
expression =
	expression expression |   // Concatenate adjacent expressions
	( '+' | '-' ) expression |
	expression ( '+' | '-' | '*' | '/' | 'lcm' | 'gcd' ) expression |
	expression ':' expression |
	expression '=>' ident |
	'{' expression [( ',' expression )* [ ',' ]] '}'  // Random choice

// Rhythm
expression =
	expression expression |   // Concat
	( '~' | '\'' ) expression |
	expression ( '<' | '>' | '**' | 'or' | 'and' | 'xor' ) expression |
	expression '=>' ident |
	'{' expression [( ',' expression )* [ ',' ]] '}'  // Random choice

// Melody
expression =
	expression expression |  // Concat
	expression '@' expression |   // Mapping
	'rev' expression |
	expression ( '<' | '>' | '**' | '+' | '-' | '*' | '/' ) expression |
	expression '=>' ident |
	'{' expression [( ',' expression )* [ ',' ]] '}'  // Random choice

// Sequence
expression =
	expression expression |
	( '/' | '*' ) expression expression |
	expression '=>' ident |
	'{' expression [( ',' expression )* [ ',' ]] '}'  // Random choice

// Pattern
expression =
	expression expression |
	'[' [( ',' expression )* [ ',' ]] ']' |  // Layer sequences
	expression '=>' ident |
	'{' expression [( ',' expression )* [ ',' ]] '}'  // Random choice

// Program
program = [ expression [(';' expression)* [ ';' ]]]


