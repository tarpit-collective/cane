// Literals
ident = ? {XID_Start}{XID_Continue}* ?
number = ? 0-9* ?
comment = ? #!.*\n ?

rhythm = '!' | '.'
expression = ident | number | rhythm

// Definition
expression = expression '=>' ident

// Expression
expression = '(' expression ')'

// Functions
type = ':' ( 'number' | 'string' | 'rhythm' | 'melody' | 'sequence' | 'pattern' )
expression = '\' ident '->' type expr '->' type
expression = expression '(' expression ')'  // Function call

// Scalars
expression =
	( '+' | '-' ) expression |
	expression ( '+' | '-' | '*' | '/' | 'lcm' | 'gcd' | '.' ) expression |
	expression ':' expression |
	expression '=>' ident |

// Rhythm
expression =
	( '~' | "'" ) expression |
	expression ( '<' | '>' | '**' | 'or' | 'and' | 'xor' | '.' ) expression |
	expression '=>' ident |

// Melody
expression =
	'&' expression |  // Coerce scalar to a melody
	"'" expression |
	expression '@' expression |   // Mapping
	expression ( '<' | '>' | '**' | '+' | '-' | '*' | '/' | '.' ) expression |
	expression '=>' ident |

// Sequence
expression =
	expression ( '.' | '*' | '/' ) expression |
	expression '=>' ident |

// Pattern
expression =
	expression '.' expression |
	expression '=>' ident |
	'[' [( ',' expression )* [ ',' ]] ']' |  // Layer sequences

// Program
program = [ expression [(';' expression)* [ ';' ]]]
